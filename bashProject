#!/usr/bin/bash
shopt -s extglob
pause() {
    read -p "Press [Enter] key to continue"
}
error() {
    echo "[ERROR] $1"
    pause
}

success() {
    echo "[SUCCESS] $1"
}
if [ ! -d "$mybase" ]
then
mkdir "$mybase"
fi
selecteddatabase=""
path="$mybase/$selecteddatabase" 
function createdatabase()
{
while true 
do
read -p "enter the name of your database you want to create or type exit to exit the creation " dbname
if [[ -z "$dbname" ]]
then
echo "database name must not be empty "
continue
fi
if [[ "$dbname" == +([0-9]) ]]
then 
echo "database name must not be numbers "
continue
fi
if ! [[ "$dbname" =~ ^[a-zA-Z]+$ ]]
then
echo "database contain only letters "
continue
fi
if [[ "$dbname" == "exit" ]]
then
break 2
fi
if [[ -d "$mybase/$dbname" ]]
then
echo  "this database is already existed "
echo "please enter a valid name to create database "
continue
fi

mkdir "$mybase/$dbname"
clear
echo "database $dbname is created successfully "
echo "enter one of the previous options again if you want "
break
done
}
function dropdatabase()
{
while true
do
read -p "enter the name of database you want to drop it or enter exit to go back " dbname
if [[ -z "$dbname" ]]
then
echo "database name must not be empty "
continue
fi
if [ -d "$mybase/$dbname" ]
then
rm -r "$mybase/$dbname"
echo "database $dbname is successfully dropped "
else
echo "this database not found please "
fi
if [[ "$dbname" == "exit" ]]
then
break 2
fi
done
}
function deletetable() {
    if [[ -z "$selecteddatabase" ]]   
  then
        echo "No database selected. Please connect to a database first."
        return
    fi
    while true; do
        read -p "enter table name you want to delete or type 'exit' to go back: " tname
        if [[ "$tname" == "exit" ]]   
  then
            break
        fi
        if [[ -f "$mybase/$selecteddatabase/$tname" && -f "$mybase/$selecteddatabase/.$tname.metadata" ]]   
  then
            echo "table $tname is found "
            break
        else
            echo "table not found "
        fi
    done
    if [[ "$tname" == "exit" ]]   
  then
        return
    fi
    while true; do
        select option in deleteall deletebyrow exit; do
            case $option in
            "deleteall")
                sed -i '1!d' "$mybase/$selecteddatabase/$tname"
                echo "all data deleted "
                ;;
            "deletebyrow")
                IFS=':' read -ra cols <"$mybase/$selecteddatabase/.$tname.metadata"
                echo "choose one of this fields "
                select colname in ${cols[@]}; do
                    if [[ -n $colname ]]   
  then
                        for ((i = 0; i < ${#cols[@]}; i++)); do
                            if [[ "${cols[i]}" == "$colname" ]]   
  then
                                colnum=$((i + 1))
                                break
                            fi
                        done
                        break
                    else
                        echo "invalid"
                    fi
                done
                read -p "enter the value you want to delete the row when it equals this value " value
                tempfile="$mybase/$selecteddatabase/.tmpfile"
                head -n 1 "$mybase/$selecteddatabase/$tname" > "$tempfile"
                while IFS= read -r line || [[ -n "$line" ]]; do
                    IFS=':' read -ra fields <<<"$line"
                    if [[ "${fields[$((colnum - 1))]}" != "$value" ]]   
  then
                        echo "$line" >>"$tempfile"
                    fi
                done < <(tail -n +2 "$mybase/$selecteddatabase/$tname")
                mv "$tempfile" "$mybase/$selecteddatabase/$tname"
                echo "Rows with $colname = $value deleted"
                ;;
            "exit")
                break 2
                ;;
            *)
                echo "invalid option"
                ;;
            esac
        done
    done
}

function selecttable() {
    if [[ -z "$selecteddatabase" ]]   
  then
        echo "No database selected. Please connect to a database first."
        return
    fi
    while true; do
        read -p "Enter table name or type 'exit' to go back: " tname
        if [[ "$tname" == "exit" ]]   
  then
            return
        fi
        if [[ -f "$mybase/$selecteddatabase/$tname" && -f "$mybase/$selecteddatabase/.$tname.metadata" ]]   
  then
            echo "Table '$tname' found."
            break
        else
            echo "Table '$tname' not found. Please try again."
        fi
    done
    while true; do
        echo ""
        echo "Options for table '$tname':"
        echo "1. Select All Rows"
        echo "2. Filter Rows by Column Value"
        echo "3. Exit to Table Menu"
        read -p "Choose an option (1-3): " main_choice
        case $main_choice in
            1)
                echo ""
                echo "All data from '$tname':"
                IFS=':' read -ra header_cols < "$mybase/$selecteddatabase/.$tname.metadata"
                printf "%-15s" "${header_cols[@]}"
                echo
                echo "----------------------------------------------"
                while IFS= read -r line || [[ -n "$line" ]]; do
                     if [[ -n "$line" ]]   
  then
                         IFS=':' read -ra fields <<< "$line"
                         printf "%-15s" "${fields[@]}"
                         echo
                     fi
                done < <(tail -n +2 "$mybase/$selecteddatabase/$tname")
                echo ""
                read -p "Press Enter to continue"
                ;;
            2)
                IFS=':' read -ra cols <"$mybase/$selecteddatabase/.$tname.metadata"
                if [[ ${#cols[@]} -eq 0 ]]   
  then
                    echo "Error: No columns found in metadata."
                    continue
                fi
                echo ""
                echo "Available columns to filter by:"
                for i in "${!cols[@]}"; do
                    echo "$((i+1)). ${cols[$i]}"
                done
                echo "$((${#cols[@]}+1)). Exit to previous menu"
                col_choice_num=""
                while true; do
                    read -p "Enter the number of the column to filter by (1-$(( ${#cols[@]} + 1 ))): " col_choice_num
                    if ! [[ "$col_choice_num" =~ ^[0-9]+$ ]]   
  then
                        echo "Invalid input. Please enter a number."
                        continue
                    fi
                    if [[ $col_choice_num -ge 1 && $col_choice_num -le ${#cols[@]} ]]   
  then
                        selected_col_index=$((col_choice_num - 1))
                        selected_col_name="${cols[$selected_col_index]}"
                        colnum=$((selected_col_index + 1))
                        break
                    elif [[ $col_choice_num -eq $((${#cols[@]} + 1)) ]]   
  then
                        col_choice_num="exit"
                        break
                    else
                        echo "Invalid number. Please choose from the list."
                    fi
                done
                if [[ "$col_choice_num" == "exit" ]]   
  then
                    continue
                fi
                echo ""
                read -p "Enter the value to search for in column '$selected_col_name': " search_value
                echo ""
                echo "Rows where column '$selected_col_name' equals '$search_value':"
                echo "----------------------------------------------"
                IFS=':' read -ra header_cols < "$mybase/$selecteddatabase/.$tname.metadata"
                printf "%-15s" "${header_cols[@]}"
                echo
                echo "----------------------------------------------"
                found_any=false
                while IFS= read -r line || [[ -n "$line" ]]; do
                    if [[ -n "$line" ]]   
  then
                        IFS=':' read -ra fields <<< "$line"
                        field_index=$((colnum - 1))
                        if [[ $field_index -lt ${#fields[@]} ]] && [[ "${fields[$field_index]}" == "$search_value" ]]   
  then
                             printf "%-15s" "${fields[@]}"
                             echo
                             found_any=true
                        fi
                    fi
                done < <(tail -n +2 "$mybase/$selecteddatabase/$tname")
                if [[ "$found_any" == false ]]   
  then
                    echo "No rows found matching '$search_value' in column '$selected_col_name'."
                fi
                echo ""
                read -p "Press Enter to continue..."
                ;;
            3)
                return
                ;;
            *)
                echo "Invalid option '$main_choice'. Please choose 1, 2, or 3."
                ;;
        esac
    done
}
function createtable() {
if [[ -z "$selecteddatabase" ]]
then
echo "No database selected. Please connect to a database first."
return
fi

while true
do
read -p "enter table name or type exit to go back " tname

if [[ -z "$tname" ]]
then
echo "table name must not be empty "
continue
fi

if [[ "$tname" == +([0-9]) ]]
then
echo "table name must not be numbers "
continue
fi

if ! [[ "$tname" =~ ^[a-zA-Z]+$ ]]
then
echo "table contain only letters "
continue
fi

if [[ "$tname" == "exit" ]]
then
break 2
fi

if [[ -f "$mybase/$selecteddatabase/$tname" ]]
then
echo "this table is already existed "
echo "please enter a valid name to create table "
continue
fi

touch "$mybase/$selecteddatabase/$tname"
touch "$mybase/$selecteddatabase/.$tname.metadata"
echo "table $tname is created successfully in $selecteddatabase"

read -p "enter number of the fields " fcount
if ! [[ "$fcount" =~ ^[0-9]+$ ]] || [[ "$fcount" -le 0 ]]
then
echo "Invalid number of fields."
rm "$mybase/$selecteddatabase/$tname"
rm "$mybase/$selecteddatabase/.$tname.metadata"
continue
fi

fieldnames=""
fieldtypes=""
fieldkeys=""
flag=false

for ((i = 0; i < fcount; i++))
do
read -p "enter the name of your field $(($i + 1)): " fname

if [[ -z "$fname" ]] || [[ "$fname" != +([a-zA-Z_0-9]) ]]
then
echo "Invalid field name. Must contain only letters, numbers, underscore."
((i--))
continue
fi

while true
do
read -p "enter the type of your field $fname int or string: " ftype
if [[ $ftype == "int" || $ftype == "string" ]]
then
break
else
echo "invalid"
fi
done

if [[ $flag == false ]]
then
read -p "is this the primary key? type yes or no: " pkornot
if [[ $pkornot == "yes" ]]
then
fieldkeys+="pk"
flag=true
else
fieldkeys+="notpk"
fi
else
fieldkeys+="notpk"
fi

if [[ $i -lt $((fcount - 1)) ]]
then
fieldnames+="$fname:"
fieldtypes+="$ftype:"
fieldkeys+=":"
else
fieldnames+="$fname"
fieldtypes+="$ftype"
fi
done

echo "$fieldnames" > "$mybase/$selecteddatabase/.$tname.metadata"
echo "$fieldtypes" >> "$mybase/$selecteddatabase/.$tname.metadata"
echo "$fieldkeys" >> "$mybase/$selecteddatabase/.$tname.metadata"
echo "$fieldnames" > "$mybase/$selecteddatabase/$tname"
clear
break
done
}
function droptable() {
    if [[ -z "$selecteddatabase" ]]   
  then
        echo "No database selected. Please connect to a database first."
        return
    fi
    while true; do
        read -p " enter table you want to drop or type 'exit' to go back: " tname
        if [[ "$tname" == "exit" ]]   
  then
            break
        fi
        if [[ -f "$mybase/$selecteddatabase/$tname" ]]   
  then
            rm "$mybase/$selecteddatabase/$tname"
            rm "$mybase/$selecteddatabase/.$tname.metadata" 2>/dev/null
            echo "table $tname is dropped "
            echo "enter one of the options again "
            break
        else
            echo "wrong name please enter again the name of table you want to drop "
        fi
    done
}
function connectdatabase(){
while true
do
read -p "enter the name of database you want to connect to it or enter exit to go back  " dbname
if [[ -z "$dbname" ]]
then
echo "database name must not be empty "
continue
fi
if [[ "$dbname" == +([0-9]) ]]
then 
echo "database name must not be numbers "
continue
fi
if ! [[ "$dbname" =~ ^[a-zA-Z]+$ ]]
then
echo "database contain only letters "
continue
fi
if [[ "$dbname" == "exit" ]]
then
break 2
fi
if [[ -d "$mybase/$dbname" ]]
then
selecteddatabase=$dbname
echo "you are connected to database $dbname "
while true
do
select option in Creatatable Listtable Droptable Inserttable Selectfromtable deletefromtable updatetable exit
do
case $option in
"Creatatable")
createtable
break
;;
"Listtable")
ls  $mybase/$selecteddatabase/
echo "they are list of tables "
echo "enter again one of the options if you want "
break
;;
"Droptable")
droptable
break
;;
"Inserttable")
inserttable
break
;;
"Selectfromtable")
selecttable
break
;;
"deletefromtable")
deletetable
break
;;
"updatetable")
echo "table is updated "
break
;;
"exit")
break 2
;;
*)
esac
done
done
break
else 
echo " the name of database you want to connect is not found "
echo "please enter again one of the previous options "
continue
fi
done
}
mainMenu() {
    while true; do
        clear
        echo "---- Main Menu ----"
        echo "1. Create Database"
        echo "2. List Databases"
        echo "3. Connect to Database"
        echo "4. Drop Database"
        echo "5. Exit"
        echo -n "Select an option: "
        read choice
        case $choice in
        1) createdatabase ;;
        2)
          echo "Available Databases:"
            ls -1 "$mybase" 2>/dev/null || echo "No databases found."
            pause
            ;;
        3) connectdatabase ;;
        4) dropdatabase ;;
        5) exit 0 ;;
        *) error "Wrong option." ;;
        esac
    done
}
tableMenu() {
    if [[ -z "$selecteddatabase" ]]   
  then
        error "No database selected. Cannot access table menu."
        return
    fi
    while true; do
        clear
        echo "---- Table Menu (Database: $selecteddatabase) ----"
        echo "1. Create Table"
        echo "2. List Tables"
        echo "3. Drop Table"
        echo "4. Insert into Table"
        echo "5. Select From Table"
        echo "6. Delete From Table"
        echo "7. Update Table"
        echo "8. Back to Main Menu"
        echo -n "Select an option: "
        read choice
        case $choice in
        1) createtable ;;
        2)
            echo "Available Tables in '$selecteddatabase':"
            if [[ -d "$mybase/$selecteddatabase" ]]   
  then
                ls -1 "$mybase/$selecteddatabase" | grep -v '^\.' | sort 2>/dev/null || echo "No tables found."
            else
                echo "Database directory not found."
            fi
            pause
            ;;
        3) droptable ;;
        4) insertIntoTable ;;
        5) selecttable ;;
        6) deletetable ;;
        7) updateTable ;;
        8) break ;;
        *) error "Wrong option." ;;
        esac
    done
}
insertIntoTable() {
if [[ -z "$selecteddatabase" ]]
then
error "No database selected. Please connect to a database first."
return
fi
echo "Enter Table Name:"
read tableName
tableFile="$mybase/$selecteddatabase/$tableName"
metaFile="$mybase/$selecteddatabase/.$tableName.metadata"
if [ ! -f "$tableFile" ]
then
error "Table '$tableName' does not exist."
return
fi
if [ ! -f "$metaFile" ]
then
error "Metadata for table '$tableName' not found."
return
fi
metaDataNames=$(head -n 1 "$metaFile")
metaDataTypes=$(head -n 2 "$metaFile" | tail -n 1)
metaDataKeys=$(head -n 3 "$metaFile" | tail -n 1)
IFS=':' read -r -a colNames <<< "$metaDataNames"
IFS=':' read -r -a colTypes <<< "$metaDataTypes"
IFS=':' read -r -a colKeys <<< "$metaDataKeys"
pKeyCol=""
pKeyIndex=-1
for i in "${!colKeys[@]}"
do
if [[ "${colKeys[$i]}" == "pk" ]]
then
pKeyCol="${colNames[$i]}"
pKeyIndex=$i
break
fi
done
rowData=()
for i in "${!colNames[@]}"
do
colName="${colNames[$i]}"
colType="${colTypes[$i]}"
echo "Enter value for $col



updateTable() {
    if [[ -z "$selecteddatabase" ]]   
  then
        error "No database selected. Please connect to a database first."
        return
    fi
    echo "Enter Table Name:"
    read tableName
    tableF="$mybase/$selecteddatabase/$tableName"
    metaF="$mybase/$selecteddatabase/.$tableName.metadata"
    if [ ! -f "$tableF" ]   
  then
        error "Table '$tableName' does not exist."
        return
    fi
    if [ ! -f "$metaF" ]   
  then
        error "Metadata file for table '$tableName' not found."
        return
    fi
    IFS=':' read -ra cols < <(head -n 1 "$metaF")
    echo "Available columns: ${cols[@]}"
    echo "Enter column to filter on:"
    read filterCol
    echo "Enter value to match:"
    read filterVal
    echo "Enter column to update:"
    read updateCol
    echo "Enter new value:"
    read newVal
    filterExists=false
    updateExists=false
    for c in "${cols[@]}"; do
        if [[ "$c" == "$filterCol" ]]   
  then
            filterExists=true
        fi
        if [[ "$c" == "$updateCol" ]]   
  then
            updateExists=true
        fi
    done
    if [[ "$filterExists" == false ]] || [[ "$updateExists" == false ]]   
  then
        error "Wrong column name."
        return
    fi
    filterIdx=-1
    updateIdx=-1
    for i in "${!cols[@]}"; do
        if [[ "${cols[$i]}" == "$filterCol" ]]   
  then
            filterIdx=$((i + 1))
        fi
        if [[ "${cols[$i]}" == "$updateCol" ]]   
  then
            updateIdx=$((i + 1))
        fi
    done
    tmpF=$(mktemp)
    head -n 1 "$tableF" > "$tmpF"
    updated=false
    while IFS= read -r line || [[ -n "$line" ]]; do
        if [[ -n "$line" ]]   
  then
            IFS=':' read -ra fields <<<"$line"
            shouldUpdate=false
            if [[ $filterIdx -le ${#fields[@]} ]]   
  then
                filterValue="${fields[$((filterIdx - 1))]}"
                if [[ "$filterValue" == "$filterVal" ]]   
  then
                    shouldUpdate=true
                fi
            fi
            if [[ "$shouldUpdate" == true ]] && [[ $updateIdx -le ${#fields[@]} ]]   
  then
                fields[$((updateIdx - 1))]="$newVal"
                updatedLine=$(IFS=':'; echo "${fields[*]}")
                echo "$updatedLine" >>"$tmpF"
                updated=true
            else
                echo "$line" >>"$tmpF"
            fi
        fi
    done < <(tail -n +2 "$tableF")
    if [[ "$updated" == true ]]   
  then
        mv "$tmpF" "$tableF"
        success "Updated rows where $filterCol = $filterVal."
    else
        rm "$tmpF"
        echo "No rows matched the filter criteria ($filterCol = $filterVal)."
        pause
    fi
}
mainMenu


